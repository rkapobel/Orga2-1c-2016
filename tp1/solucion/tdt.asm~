; FUNCIONES de C
  extern malloc
  extern free
  extern strcpy
  extern tdt_agregar
  extern tdt_borrar
  
; FUNCIONES
  global tdt_crear
;  global tdt_recrear
;  global tdt_cantidad
;  global tdt_agregarBloque
;  global tdt_agregarBloques
;  global tdt_borrarBloque
;  global tdt_borrarBloques
;  global tdt_traducir
;  global tdt_traducirBloque
;  global tdt_traducirBloques
;  global tdt_destruir

; /** defines offsets y size: struct TDT**/
  %define TDT_OFFSET_IDENTIFICACION   0
  %define TDT_OFFSET_PRIMERA          8
  %define TDT_OFFSET_CANTIDAD        16
  %define TDT_SIZE                   20
; /** defines offsets y size: constants**/
  %define NULL 0
  %define ZERO 0

; MODO DE USO DE REGISTROS!
; R8  R9  R10  R11 LOS USO COMO QUIERO PERO OJO CON R8 Y R9
; RBX R12 R13 R14 R15 PUSHEARLOS!!
; ORDEN DE LOS PARAMETROS: RDI RSI RDX RCX R8 R9 (integers) OJO cuando hay varios parametros | XMMn (. flotante) n <= 15
; RETORNO: RAX o XMM0
; SUB RSP, <bytes> PARA RESERVAR VARIABLES LOCALES Y PARA ALINEARSE. LUEGO: ADD RSP, <bytes> PARA REESTABLECER
; stn = sub-table n = number
section .text

; =====================================
; tdt* tdt_crear(char* identificacion)
tdt_crear:
	PUSH RBP
	MOV RBP, RSP
	MOV R9, RDI
	MOV RDI, TDT_SIZE 
	CALL malloc
	MOV QWORD [RAX + TDT_OFFSET_IDENTIFICACION], R9	
	MOV QWORD [RAX + TDT_OFFSET_PRIMERA], NULL
	MOV DWORD [RAX + TDT_OFFSET_CANTIDAD], ZERO
	POP RBP
	RET

; =====================================
; void tdt_recrear(tdt** tabla, char* identificacion)
tdt_recrear:
    PUSH RBP
	MOV RBP, RSP
	MOV RDX, [RDI]
	CMP RSI, NULL
	JE .identificacionNull
	MOV QWORD [RDX + TDT_OFFSET_IDENTIFICACION], RSI

.identificacionNull:
    MOV DWORD [RDX + TDT_OFFSET_CANTIDAD], ZERO
    
    XOR R8, R8 ; i uso R8W? puedo sumarlo a RDX?
    XOR R9, R9 ; j uso R9W? puedo sumarlo a RDX?
    
    CMP QWORD [RDX + TDT_OFFSET_PRIMERA], NULL
    JE .salir

.vaciarSt1:
    MOV RCX, [RDX + TDT_OFFSET_PRIMERA]
    MOV RCX, [RCX] ; tdtN1*
    MOV RCX, [RCX + R8] ; entradas[i]
    CMP RCX, NULL
    JE .continuarSt1
.vaciarSt2:
    MOV RCX, [RCX] ; tdtN2*
    
.continuarSt1:    

.salir:
    POP RBP
    RET     

; =====================================
; uint32_t tdt_cantidad(tdt* tabla)
tdt_cantidad:

; =====================================
; void tdt_agregarBloque(tdt* tabla, bloque* b)
tdt_agregarBloque:

; =====================================
; void tdt_agregarBloques(tdt* tabla, bloque** b)
tdt_agregarBloques:
        
; =====================================
; void tdt_borrarBloque(tdt* tabla, bloque* b)
tdt_borrarBloque:
        
; =====================================
; void tdt_borrarBloques(tdt* tabla, bloque** b)
tdt_borrarBloques:
        
; =====================================
; void tdt_traducir(tdt* tabla, uint8_t* clave, uint8_t* valor)
tdt_traducir:
        
; =====================================
; void tdt_traducirBloque(tdt* tabla, bloque* b)
tdt_traducirBloque:

; =====================================
; void tdt_traducirBloques(tdt* tabla, bloque** b)
tdt_traducirBloques:
        
; =====================================
; void tdt_destruir(tdt** tabla)
tdt_destruir:


